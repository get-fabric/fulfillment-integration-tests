name: integration-test

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      namespace:
        required: false
        default: fulfillment
        type: string
      branch:
        required: true
        type: string
      test_runner_service_name:
        required: false
        default: integration-test-runner
        type: string
      test_runner_endpoint:
        required: false
        default: sanity
        type: string
      debug_enabled:
        required: false
        default: false
        type: string
    secrets:
      git_token:
        required: true
      gcloud_token:
        required: true
      gcr_token:
        required: false
      slack_token:
        required: true

jobs:
  build-image:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: gcr login
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.gcr_token }}

    - name: set up docker buildx
      uses: docker/setup-buildx-action@v1
      with:
        driver-opts: network=host

    - name: clone repository
      uses: actions/checkout@v2
      with:
        path: ${{ inputs.service_name }}
        repository: get-fabric/${{ inputs.service_name }}
        ref: ${{ inputs.branch }}
        token: ${{ secrets.git_token }}

    - name: build image
      uses: docker/build-push-action@v2
      with:
        context: ./${{ inputs.service_name }}
        build-args: |
          NPM_TOKEN=${{ secrets.git_token }}
        tags: gcr.io/fabric-registry/cloud-services/${{ inputs.service_name }}:${{ github.event.pull_request.head.sha || github.sha }}
        push: true
        cache-from: type=gha, scope=${{ github.workflow }}
        cache-to: type=gha, scope=${{ github.workflow }}

  sanity:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: started
        id: start_time
        run: echo "::set-output name=time::$(date +%s)"

      - name: install helm
        uses: azure/setup-helm@v1
        with:
          version: latest

      - name: install node
        run: |
          sudo apt update -y
          sudo apt install nodejs -y
          node -v

      - name: 'gcloud auth login'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.gcloud_token }}'

      - name: install gcloud cli
        uses: google-github-actions/setup-gcloud@v0.3.0

      - name: clone fulfillment-integration repository
        uses: actions/checkout@v2
        with:
          path: fulfillment-integration
          repository: get-fabric/fulfillment-integration
          token: ${{ secrets.git_token }}

      - name: clone fulfillment-integration-tests repository
        uses: actions/checkout@v2
        with:
          path: fulfillment-integration-tests
          repository: get-fabric/fulfillment-integration-tests
          token: ${{ secrets.git_token }}

      - name: create cluster
        run: |
          gcloud container clusters get-credentials integration-tests --region us-east4 --project fabric-global-test
          gcloud components install kubectl
          curl -s -L "https://github.com/loft-sh/vcluster/releases/latest" | sed -nE 's!.*"([^"]*vcluster-linux-arm64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o vcluster && chmod +x vcluster;
          echo 11111111
          /usr/local/bin vcluster create vcluster-1 -n tests-$RANDOM
          /usr/local/bin vcluster connect vcluster-1 -n tests-$RANDOM &
          sleep 10
          cp ./kubeconfig.yaml ~/kubeconfig.yaml
          export KUBECONFIG=~/kubeconfig.yaml

      - name: deploy services
        working-directory: fulfillment-integration-tests
        run: |
          bash ./manage_services.sh ../fulfillment-integration/deployments apply
          bash ./wait_for_pods_ready.sh 5

      - name: wait for build image to succeed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.git_token }}
          checkName: integration-test / build-image
          intervalSeconds: 1
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 120

      - name: clone repository
        uses: actions/checkout@v2
        with:
          path: ${{ inputs.service_name }}
          repository: get-fabric/${{ inputs.service_name }}
          ref: ${{ inputs.branch }}
          token: ${{ secrets.git_token }}

      - name: generate yaml
        run: |
          cd ${{ inputs.service_name }}/deployment
          helm dep update
          helm template -f values.yaml -f values.integration.yaml --name-template=${{ inputs.service_name }} --set fabric-chart.image.tag="${{ github.event.pull_request.head.sha || github.sha }}" --set fabric-chart.image.pullPolicy="Always" . > ${{ inputs.service_name }}.yaml

      - name: deploy
        run: |
          kubectl delete -n ${{ inputs.namespace }} -f ${{ inputs.service_name }}/deployment/${{ inputs.service_name }}.yaml --grace-period=0 --ignore-not-found=true
          kubectl apply -n ${{ inputs.namespace }} -f ${{ inputs.service_name }}/deployment/${{ inputs.service_name }}.yaml
          sleep 5
          bash ./fulfillment-integration-tests/wait_for_pods_ready.sh 5

      - name: run test
        working-directory: fulfillment-integration-tests
        run: bash ./test.sh ${{ inputs.test_runner_service_name }} ${{ inputs.test_runner_endpoint }}

      - name: delete cluster
        if: always()
        run: |
          vcluster delete vcluster-1 -n tests-$RANDOM

      - name: calculate exeuction time
        id: exexution_time
        if: always()
        run: |
          startTime=${{ steps.start_time.outputs.time }}
          currentTime=$(date +%s)
          executionTimeSeconds=$((currentTime-startTime))
          ((sec=executionTimeSeconds%60, executionTimeSeconds/=60, min=executionTimeSeconds%60))
          executionTime=$(printf "%02d:%02d" $min $sec)
          echo "::set-output name=time::$executionTime"

      - name: report cancelled
        if: cancelled()
        uses: actions-ecosystem/action-slack-notifier@v1
        with:
          slack_token: ${{ secrets.slack_token }}
          message: |
            ${{ inputs.test_runner_endpoint }} integration test was cancelled after ${{ steps.exexution_time.outputs.time }} minutes
          color: yellow
          channel: fulfillment-integration-tests-monitoring
          verbose: true

      - name: report failure
        if: failure()
        continue-on-error: true
        uses: actions-ecosystem/action-slack-notifier@v1
        with:
          slack_token: ${{ secrets.slack_token }}
          message: |
            ${{ inputs.test_runner_endpoint }} integration test failed after ${{ steps.exexution_time.outputs.time }} minutes
          color: red
          channel: fulfillment-integration-tests-monitoring
          verbose: true

      - name: report success
        if: success()
        continue-on-error: true
        uses: actions-ecosystem/action-slack-notifier@v1
        with:
          slack_token: ${{ secrets.slack_token }}
          message: |
            ${{ inputs.test_runner_endpoint }} integration test succeeded after ${{ steps.exexution_time.outputs.time }} minutes
          color: green
          channel: fulfillment-integration-tests-monitoring
          verbose: true

      - name: enabled debug
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event.inputs.debug_enabled }}
